'use client'

import { useParams } from 'next/navigation'
import React, { useEffect, useState } from 'react'
import { URL } from '../../constants'
import axios from 'axios'
import { MDBBtn, MDBRange, MDBTooltip, MDBAccordion, MDBAccordionItem, MDBInput } from 'mdb-react-ui-kit'
import TimeSlotSelector from '@/app/components/TimeSlots'
import { getCartItems, useCartStore, useOrderDetails } from '@/Store'
import { useRouter } from 'next/navigation'
import Accessory from '@/app/components/Accessory'

const ProductScreen = () => {
  const { slug } = useParams()
  const [product, setProduct] = useState(null)
  const [loading, setLoading] = useState(true)
  const [zoomable, setZoomable] = useState(false)
  const [imageSize, setImageSize] = useState({ width: 0, height: 0 })
  const [position, setPosition] = useState({ x: 0, y: 0, mouseX: 0, mouseY: 0 })
  const [quantity, setQuantity] = useState(1)
  const [isVisible, setIsVisible] = useState(false)
  const [accessories, setccessories] = useState([
    {name:'book', price: 10, inStock: 3, image:"https://www.floralshopuae.com/wp-content/uploads/2025/02/red-rose-bouquet-delivery-uae-300x300.jpg"},
    {name:'balloon', price: 10, inStock: 3, image:"https://www.floralshopuae.com/wp-content/uploads/2025/02/red-rose-bouquet-delivery-uae-300x300.jpg"},
    {name:'socks', price: 10, inStock: 3, image:"https://www.floralshopuae.com/wp-content/uploads/2025/02/red-rose-bouquet-delivery-uae-300x300.jpg"},
    {name:'bear', price: 10, inStock: 3, image:"https://www.floralshopuae.com/wp-content/uploads/2025/02/red-rose-bouquet-delivery-uae-300x300.jpg"},
  ])

  const MAGNIFIER_SIZE = 150
  const ZOOM_LEVEL = 2

  const { date, slot, city } = useOrderDetails()
  const { addItem } = useCartStore()
  const router = useRouter()

  useEffect(() => {
    const getProduct = async () => {
      try {
        const { data } = await axios.get(`${URL}/products/${slug}`)
        setProduct(data)
      } catch (error) {
        console.error('Error fetching product:', error)
      } finally {
        setLoading(false)
      }
    }
    if (slug) getProduct()
  }, [slug])

  const handleQuantityChange = (e) => {
    const newQuantity = parseInt(e.target.value)
    setQuantity(Math.max(1, Math.min(newQuantity, product?.inStock || 1)))
  }

  const handleInputChange = (e) => {
    let newQuantity = parseInt(e.target.value) || 1
    newQuantity = Math.max(1, Math.min(newQuantity, product?.inStock || 1))
    setQuantity(newQuantity)
  }

  const handleAddToCart = () => {
    if (!product) return
    
    addItem({
      ...product,
      quantity,
      deliveryDate: date,
      deliverySlot: slot
    })
    console.log(getCartItems())
    setIsVisible(true)
  }

  const handleCloseModal=()=>{
    setIsVisible(false);
    router.push('/cart');
  }

  const handleMouseEnter = (e) => {
    const { width, height } = e.currentTarget.getBoundingClientRect()
    setImageSize({ width, height })
    setZoomable(true)
    updatePosition(e)
  }

  const handleMouseLeave = () => setZoomable(false)
  
  const handleMouseMove = (e) => updatePosition(e)

  const updatePosition = (e) => {
    const { left, top } = e.currentTarget.getBoundingClientRect()
    const x = e.clientX - left
    const y = e.clientY - top
    
    setPosition({
      x: -x * ZOOM_LEVEL + (MAGNIFIER_SIZE / 2),
      y: -y * ZOOM_LEVEL + (MAGNIFIER_SIZE / 2),
      mouseX: x - (MAGNIFIER_SIZE / 2),
      mouseY: y - (MAGNIFIER_SIZE / 2),
    })
  }


  if (loading) return <div className="text-center py-5"><div className="spinner-border"></div></div>
  if (!product) return <div className="alert alert-danger">Product not found</div>

  return (
    <div className="container container-fluid mt-4">
      <div className="row gx-4">
        {/* Image Column */}
        <div className="col-lg-5 col-md-6 position-relative" style={{ minHeight: '600px' }}>
          <div 
            className="h-100 w-100 position-relative"
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
            onMouseMove={handleMouseMove}
          >
            <img 
              src={product.image} 
              className="img-fluid rounded shadow-4"
              style={{ 
                height: '600px', 
                width: '100%', 
                objectFit: 'cover',
                cursor: zoomable ? 'none' : 'auto'
              }}
              alt={product.name}
            />
            
            {zoomable && (
              <div
                className="position-absolute rounded-circle shadow-4 border border-3 border-light"
                style={{
                  backgroundPosition: `${position.x}px ${position.y}px`,
                  backgroundImage: `url(${product.image})`,
                  backgroundSize: `${imageSize.width * ZOOM_LEVEL}px ${imageSize.height * ZOOM_LEVEL}px`,
                  backgroundRepeat: 'no-repeat',
                  top: `${position.mouseY}px`,
                  left: `${position.mouseX}px`,
                  width: `${MAGNIFIER_SIZE}px`,
                  height: `${MAGNIFIER_SIZE}px`,
                  pointerEvents: 'none',
                  zIndex: 100,
                  transform: 'translate(-50%, -50%)'
                }}
              />
            )}
          </div>
        </div>

        {/* Product Details Column */}
        <div className="col-lg-4 col-md-6">
          <div className="card h-100 p-3 shadow-2-strong">
            <h1 className="h2 mb-3">{product.name}</h1>
            <hr className="my-2" />
            <p className="h3 text-primary mb-3">
              <sup className="fs-6">AED</sup> {product.price}
            </p>
            
            <MDBAccordion initialActive={0} className="mb-4">
              <MDBAccordionItem collapseId={1} headerTitle="Select Time Slot">
                <TimeSlotSelector />
              </MDBAccordionItem>
            </MDBAccordion>
            
            <div className="mb-3">
              <p className="text-muted">{product.description}</p>
            </div>
          </div>
        </div>

        {/* Action Column */}
        <div className="col-lg-3 col-md-12 mt-md-0 mt-3">
          <div className="card p-3 shadow-2-strong sticky-top" style={{ top: '20px' }}>
            <div className="quantity-selector">
              <div className="d-flex align-items-center gap-3 mb-3">
                <MDBRange
                  value={quantity}
                  onChange={handleQuantityChange}
                  min="1"
                  max={product.inStock}
                  id="quantityRange"
                  className="flex-grow-1"
                />
                <MDBInput
                  type="number"
                  value={quantity}
                  onChange={handleInputChange}
                  min="1"
                  max={product.inStock}
                  //style={{ width: '70px' }}
                  className="text-center"
                />
              </div>
              <div className="d-flex justify-content-between">
                <small>1</small>
                <small>{product.inStock}</small>
              </div>
            </div>
            
            {date && (
              <div className="my-4 p-3 rounded alert-primary">
                <h5>Summary</h5>
                <p className="mb-0">
                  {city} delivery <br/> 
                  On {new Date(date).toDateString()} <br/>
                  {slot?.key} ({slot?.value})
                </p>
              </div>
            )}
            
            <MDBBtn data-mdb-modal-init data-mdb-target="#accessories-modal"
              disabled={!slot || !date || !product.inStock} 
              onClick={handleAddToCart}
              color="dark" 
              ripple="true" 
              rippleColor="light" 
              className="w-100 mb-2 py-2"
            >
              ADD TO BASKET
            </MDBBtn>
            
            <MDBBtn data-mdb-modal-init data-mdb-target="#accessories-modal"
              disabled={!slot || !date || !product.inStock}
              color="primary" 
              ripple="true" 
              className="w-100 mb-3 py-2"
            >
              BUY NOW
            </MDBBtn>
            
            <MDBTooltip
              tag="a" wrapperProps={{ href: '#' }} title="Add to wishlist">
              <MDBBtn color="light" ripple="true" className="w-100 mb-2">
                <i className="far fa-heart me-2"></i> WISHLIST
              </MDBBtn>
            </MDBTooltip>
            <div className="text-center small mt-2">
              <span className="text-muted">Free returns â€¢ Secure payment</span>
            </div>
          </div>
        </div>
      </div>
      {isVisible && (
      <div className='modal' style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>
        <div className='modal-dialog'>
          <div className='modal-content'>
            <div className='modal-body'>
              {accessories.map((acc, index) => (
                <Accessory accessory={acc}/>
              ))}
            </div>
            <div className='modal-footer'>
              <MDBBtn onClick={handleCloseModal}>Close and Go to Cart</MDBBtn>
            </div>
          </div>
        </div>
      </div>
    )}
    </div>
  )
}

export default ProductScreen